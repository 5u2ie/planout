* Noteworthy changes in release 0.6 (TBD)
- The Sample Op is more efficient now, but will break existing uses (including namespace segment assignments). If you want to 
  migrate to v0.6 and have existing uses of the Sample op return the same values, add 'use_old_sample=True' as an input to the 
  sample op. If you're using namespaces and want to preserve segment assignments in an existing namespace just add
  'use_old_sample=True' as an input to the namespace.

- The return value of assign now determines whether or not an exposure event will
  be automatically logged. If either a truth-y value or nothing is returned from assign, then exposure
  will be logged. If a false-y value (excluding None) is returned then exposure will not be logged.

- The SimpleInterpretedExperiment now correctly respects the return op and does not log exposure if a
  false-y value is returned

- Adds a ProductionExperiment class that includes the ability assert what variables an experiment sets so that exposure is not incorrectly logged when calls to the experiment request parameters that are not defined.

* Noteworthy changes in release 0.5 (2014-11-23)
- A SimpleInterpretedExperiment to make it easier to get up and running with
  the PlanOut language and interpreter.

- PlanOut language:
  - Standardized handling of undefined keys: indexing into a list or dictionary
    for an invalid index or key always yields null; nulls may be coalesced via
    the null coalescing operator, coalesce()
  - A return() operator for determining whether the input units are
    "in the experiment" (and therefore logged). Calling "return;" or
    "return <value with positive truthiness>" sets in_experiment to True.
    Returning a value with negative truthiness sets in_experiment to False.

- PlanOut interpreter:
  - Convenience methods for extracting and checking typed operator arguments,
    e.g., self.getArgInt('x') will retreive an argument named 'x'. If 'x' is
    not given, or 'x' is not an integer, an error will be thrown. This improves
    ease of debugging, and also provides a clear path for those who are
    implementing the interpreter in strongly typed language.
  - Improved argument checking for built-in operators.

- PlanOut editor: the PlanOut editor is a reactive development environment and
testing system for PlanOut-language experiments.

- Breaking changes:
  - Namespaces: when a unit is assigned to an experiment and in_experiment is
    set to False, the default experiment is executed.
  - PlanOut interpreter:
    - The length() operator's argument is now 'value', as to allow for unnamed
      arguments to be passed in.
    - Min and max are now required arguments for randomInteger and randomFloat
    - Deprecated validate() and options() methods
    - Deprecated self.parameters for operators: self.args refers to arguments
      passed into an operator. If an object is a subclass of SimpleOp, then
      the arguments are pre-evaluated (and act just like self.parameters).


* Noteworthy changes in release 0.4 (2014-10-29)
- Full support for parameter overrides, which allow for testing of PlanOut
  experiments
- Alpha version of PlanOut editor
- Bugfixes to how the PlanOut compiler handles indexing into arrays multiple
times (e.g., a['b'][1][0])


* Noteworthy changes in release 0.3 (2014-06-18) [alpha]
- IMPORTANT UPDATE: The hash function used in prior versions did not match the expected behavior in the documentation (caught by @akalicki). We have updated PlanOut's hashing function, which will likely cause units to be randomly assigned to different parameters. If you are already using PlanOut in a production environment, please upgrade with care. If you are not currently using PlanOut in a production environment, please upgrade immediately:

  pip install -U planout

- Other updates:
  -The assign() method is now only called once. Thanks to @akalicki for catching this.
