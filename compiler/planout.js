/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var planout = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"rules_list":4,"rule":5,"expression":6,"IDENTIFIER":7,"=":8,"simple_expression":9,"END_STATEMENT":10,"switch_expression":11,"if_expression":12,"TRUE":13,"FALSE":14,"NULL":15,"[":16,"array":17,"]":18,"(":19,"arguments":20,")":21,"{":22,"}":23,"CONST":24,"JSON_START":25,"json":26,"%":27,"/":28,">":29,"<":30,"EQUALS":31,"NEQ":32,"LTE":33,"GTE":34,"+":35,"-":36,"*":37,"!":38,"OR":39,"COALESCE":40,"AND":41,",":42,"json_array":43,"json_map":44,":":45,"arguments_list":46,"values_list":47,"SWITCH":48,"cases_list":49,"IF":50,"optional_else_expression":51,"ELSE":52,"case":53,"THEN":54,"$accept":0,"$end":1},
terminals_: {2:"error",7:"IDENTIFIER",8:"=",10:"END_STATEMENT",13:"TRUE",14:"FALSE",15:"NULL",16:"[",18:"]",19:"(",21:")",22:"{",23:"}",24:"CONST",25:"JSON_START",27:"%",28:"/",29:">",30:"<",31:"EQUALS",32:"NEQ",33:"LTE",34:"GTE",35:"+",36:"-",37:"*",38:"!",39:"OR",40:"COALESCE",41:"AND",42:",",45:":",48:"SWITCH",50:"IF",52:"ELSE",54:"THEN"},
productions_: [0,[3,1],[4,0],[4,2],[5,1],[5,4],[6,1],[6,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,3],[9,3],[9,1],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,3],[9,3],[17,0],[17,1],[17,3],[26,1],[26,1],[26,3],[26,3],[43,0],[43,1],[43,3],[44,0],[44,3],[44,5],[20,0],[20,1],[20,1],[46,3],[46,5],[47,1],[47,3],[11,4],[12,6],[51,0],[51,2],[51,2],[49,0],[49,3],[53,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = {"op": "seq", "seq": $$[$0]}; console.log(JSON.stringify(this.$)); return this.$; 
break;
case 2: this.$ = []; 
break;
case 3: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = {"op": "set", "var": $$[$0-3], "value": $$[$0-1]}; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = {"op": "get", "var": $$[$0]}; 
break;
case 9: this.$ = true; 
break;
case 10: this.$ = false; 
break;
case 11: this.$ = null; 
break;
case 12: this.$ = {"op": "array", "values": $$[$0-1]}; 
break;
case 13: this.$ = $$[$0-1]; this.$["op"] = $$[$0-3]; 
break;
case 14: this.$ = {"op": "index", "base": $$[$0-3], "index": $$[$0-1]}; 
break;
case 15: this.$ = {"op": "seq", "seq": $$[$0-1]}; 
break;
case 16: this.$ = $$[$0-1]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = {"op": "literal", "value": $$[$0]}; 
break;
case 19: this.$ = {"op": "%", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 20: this.$ = {"op": "/", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 21: this.$ = {"op": ">", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 22: this.$ = {"op": "<", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 23: this.$ = {"op": "equals", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 24: this.$ = {"op": "not", "value": {"op": "equals", "left": $$[$0-2], "right": $$[$0]}}; 
break;
case 25: this.$ = {"op": "<=", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 26: this.$ = {"op": ">=", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 27: this.$ = {"op": "sum", "values": [$$[$0-2], $$[$0]]}; 
break;
case 28: this.$ = {"op": "sum", "values": [$$[$0-2], {"op": "negative", "value": $$[$0]}]}; 
break;
case 29: this.$ = {"op": "product", "values": [$$[$0-2], $$[$0]]}; 
break;
case 30: this.$ = {"op": "negative", "value": $$[$0]}; 
break;
case 31: this.$ = {"op": "not", "value": $$[$0]}; 
break;
case 32: this.$ = {"op": "or", "values": [$$[$0-2], $$[$0]]}; 
break;
case 33: this.$ = {"op": "coalesce", "values": [$$[$0-2], $$[$0]]}; 
break;
case 34: this.$ = {"op": "and", "values": [$$[$0-2], $$[$0]]}; 
break;
case 35: this.$ = []; 
break;
case 36: this.$ = [$$[$0]]; 
break;
case 37: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 38: this.$ = JSON.parse($$[$0]); 
break;
case 39: this.$ = $$[$0]; 
break;
case 40: this.$ = $$[$0-1]; 
break;
case 41: this.$ = $$[$0-1]; 
break;
case 42: this.$ = []; 
break;
case 43: this.$ = []; this.$.push($$[$0]); 
break;
case 44: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 45: this.$ = {}; 
break;
case 46: this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 47: this.$ = $$[$0-4]; this.$[$$[$0-2]] = $$[$0]; 
break;
case 48: this.$ = {}; 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = $$[$0]; 
break;
case 51: this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 52: this.$ = $$[$0-4]; this.$[$$[$0-2]] = $$[$0]; 
break;
case 53: this.$ = {}; this.$["values"] = [$$[$0]]; 
break;
case 54: this.$ = $$[$0-2]; this.$["values"].push($$[$0]); 
break;
case 55: this.$ = {"op": "switch", "cases": $$[$0-1]}; 
break;
case 56: this.$ = {"op": "cond", "cond": [{"if": $$[$0-3], "then": $$[$0-1]}]};
      if ($$[$0]["cond"]) {
        this.$["cond"] = this.$["cond"].concat($$[$0]["cond"]);
      }
    
break;
case 57: this.$ = {}; 
break;
case 58: this.$ = $$[$0]; 
break;
case 59: this.$ = {"op": "cond", "cond": [{"if": true, "then": $$[$0]}]}; 
break;
case 60: this.$ = []; 
break;
case 61: this.$ = $$[$0-2]; this.$.push($$[$0-1]); 
break;
case 62: this.$ = {"op": "case", "condidion": $$[$0-2], "result": $$[$0]}; 
break;
}
},
table: [{1:[2,2],3:1,4:2,7:[2,2],48:[2,2],50:[2,2]},{1:[3]},{1:[2,1],5:3,6:4,7:[1,5],11:6,12:7,48:[1,8],50:[1,9]},{1:[2,3],7:[2,3],23:[2,3],48:[2,3],50:[2,3]},{1:[2,4],7:[2,4],23:[2,4],48:[2,4],50:[2,4]},{8:[1,10]},{1:[2,6],7:[2,6],10:[2,6],23:[2,6],48:[2,6],50:[2,6]},{1:[2,7],7:[2,7],10:[2,7],23:[2,7],48:[2,7],50:[2,7]},{22:[1,11]},{19:[1,12]},{7:[1,14],9:13,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[2,60],13:[2,60],14:[2,60],15:[2,60],16:[2,60],19:[2,60],22:[2,60],23:[2,60],24:[2,60],25:[2,60],36:[2,60],38:[2,60],49:25},{7:[1,14],9:26,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{10:[1,27],16:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42]},{1:[2,8],7:[2,8],10:[2,8],16:[2,8],18:[2,8],19:[1,43],21:[2,8],23:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],39:[2,8],40:[2,8],41:[2,8],42:[2,8],48:[2,8],50:[2,8],52:[2,8],54:[2,8]},{1:[2,9],7:[2,9],10:[2,9],16:[2,9],18:[2,9],21:[2,9],23:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],39:[2,9],40:[2,9],41:[2,9],42:[2,9],48:[2,9],50:[2,9],52:[2,9],54:[2,9]},{1:[2,10],7:[2,10],10:[2,10],16:[2,10],18:[2,10],21:[2,10],23:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],48:[2,10],50:[2,10],52:[2,10],54:[2,10]},{1:[2,11],7:[2,11],10:[2,11],16:[2,11],18:[2,11],21:[2,11],23:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],48:[2,11],50:[2,11],52:[2,11],54:[2,11]},{7:[1,14],9:45,13:[1,15],14:[1,16],15:[1,17],16:[1,18],17:44,18:[2,35],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24],42:[2,35]},{4:46,7:[2,2],23:[2,2],48:[2,2],50:[2,2]},{7:[1,14],9:47,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{1:[2,17],7:[2,17],10:[2,17],16:[2,17],18:[2,17],21:[2,17],23:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],48:[2,17],50:[2,17],52:[2,17],54:[2,17]},{7:[1,49],16:[1,51],22:[1,52],24:[1,50],26:48},{7:[1,14],9:53,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:54,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:57,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],23:[1,55],24:[1,21],25:[1,22],36:[1,23],38:[1,24],53:56},{16:[1,28],21:[1,58],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42]},{1:[2,5],7:[2,5],23:[2,5],48:[2,5],50:[2,5]},{7:[1,14],9:59,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:60,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:61,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:62,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:63,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:64,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:65,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:66,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:67,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:68,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:69,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:70,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:71,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:72,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:73,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,77],9:78,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],20:74,21:[2,48],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24],46:75,47:76},{18:[1,79],42:[1,80]},{16:[1,28],18:[2,36],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],42:[2,36]},{5:3,6:4,7:[1,5],11:6,12:7,23:[1,81],48:[1,8],50:[1,9]},{16:[1,28],21:[1,82],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42]},{1:[2,18],7:[2,18],10:[2,18],16:[2,18],18:[2,18],21:[2,18],23:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],39:[2,18],40:[2,18],41:[2,18],42:[2,18],48:[2,18],50:[2,18],52:[2,18],54:[2,18]},{1:[2,38],7:[2,38],10:[2,38],16:[2,38],18:[2,38],21:[2,38],23:[2,38],27:[2,38],28:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],34:[2,38],35:[2,38],36:[2,38],37:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],45:[2,38],48:[2,38],50:[2,38],52:[2,38],54:[2,38]},{1:[2,39],7:[2,39],10:[2,39],16:[2,39],18:[2,39],21:[2,39],23:[2,39],27:[2,39],28:[2,39],29:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],45:[2,39],48:[2,39],50:[2,39],52:[2,39],54:[2,39]},{7:[1,49],16:[1,51],18:[2,42],22:[1,52],24:[1,50],26:84,42:[2,42],43:83},{7:[1,49],16:[1,51],22:[1,52],23:[2,45],24:[1,50],26:86,42:[2,45],44:85},{1:[2,30],7:[2,30],10:[2,30],16:[1,28],18:[2,30],21:[2,30],23:[2,30],27:[1,29],28:[1,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[1,39],39:[2,30],40:[2,30],41:[2,30],42:[2,30],48:[2,30],50:[2,30],52:[2,30],54:[2,30]},{1:[2,31],7:[2,31],10:[2,31],16:[1,28],18:[2,31],21:[2,31],23:[2,31],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],42:[2,31],48:[2,31],50:[2,31],52:[2,31],54:[2,31]},{1:[2,55],7:[2,55],10:[2,55],23:[2,55],48:[2,55],50:[2,55]},{10:[1,87]},{16:[1,28],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],54:[1,88]},{7:[1,14],9:89,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{16:[1,28],18:[1,90],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42]},{1:[2,19],7:[2,19],10:[2,19],16:[1,28],18:[2,19],21:[2,19],23:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],48:[2,19],50:[2,19],52:[2,19],54:[2,19]},{1:[2,20],7:[2,20],10:[2,20],16:[1,28],18:[2,20],21:[2,20],23:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],48:[2,20],50:[2,20],52:[2,20],54:[2,20]},{1:[2,21],7:[2,21],10:[2,21],16:[1,28],18:[2,21],21:[2,21],23:[2,21],27:[1,29],28:[1,30],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[1,37],36:[1,38],37:[1,39],39:[2,21],40:[2,21],41:[2,21],42:[2,21],48:[2,21],50:[2,21],52:[2,21],54:[2,21]},{1:[2,22],7:[2,22],10:[2,22],16:[1,28],18:[2,22],21:[2,22],23:[2,22],27:[1,29],28:[1,30],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[1,37],36:[1,38],37:[1,39],39:[2,22],40:[2,22],41:[2,22],42:[2,22],48:[2,22],50:[2,22],52:[2,22],54:[2,22]},{1:[2,23],7:[2,23],10:[2,23],16:[1,28],18:[2,23],21:[2,23],23:[2,23],27:[1,29],28:[1,30],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[1,37],36:[1,38],37:[1,39],39:[2,23],40:[2,23],41:[2,23],42:[2,23],48:[2,23],50:[2,23],52:[2,23],54:[2,23]},{1:[2,24],7:[2,24],10:[2,24],16:[1,28],18:[2,24],21:[2,24],23:[2,24],27:[1,29],28:[1,30],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[1,37],36:[1,38],37:[1,39],39:[2,24],40:[2,24],41:[2,24],42:[2,24],48:[2,24],50:[2,24],52:[2,24],54:[2,24]},{1:[2,25],7:[2,25],10:[2,25],16:[1,28],18:[2,25],21:[2,25],23:[2,25],27:[1,29],28:[1,30],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[1,37],36:[1,38],37:[1,39],39:[2,25],40:[2,25],41:[2,25],42:[2,25],48:[2,25],50:[2,25],52:[2,25],54:[2,25]},{1:[2,26],7:[2,26],10:[2,26],16:[1,28],18:[2,26],21:[2,26],23:[2,26],27:[1,29],28:[1,30],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[1,37],36:[1,38],37:[1,39],39:[2,26],40:[2,26],41:[2,26],42:[2,26],48:[2,26],50:[2,26],52:[2,26],54:[2,26]},{1:[2,27],7:[2,27],10:[2,27],16:[1,28],18:[2,27],21:[2,27],23:[2,27],27:[1,29],28:[1,30],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[1,39],39:[2,27],40:[2,27],41:[2,27],42:[2,27],48:[2,27],50:[2,27],52:[2,27],54:[2,27]},{1:[2,28],7:[2,28],10:[2,28],16:[1,28],18:[2,28],21:[2,28],23:[2,28],27:[1,29],28:[1,30],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[1,39],39:[2,28],40:[2,28],41:[2,28],42:[2,28],48:[2,28],50:[2,28],52:[2,28],54:[2,28]},{1:[2,29],7:[2,29],10:[2,29],16:[1,28],18:[2,29],21:[2,29],23:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],39:[2,29],40:[2,29],41:[2,29],42:[2,29],48:[2,29],50:[2,29],52:[2,29],54:[2,29]},{1:[2,32],7:[2,32],10:[2,32],16:[1,28],18:[2,32],21:[2,32],23:[2,32],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[2,32],40:[2,32],41:[2,32],42:[2,32],48:[2,32],50:[2,32],52:[2,32],54:[2,32]},{1:[2,33],7:[2,33],10:[2,33],16:[1,28],18:[2,33],21:[2,33],23:[2,33],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[2,33],40:[2,33],41:[2,33],42:[2,33],48:[2,33],50:[2,33],52:[2,33],54:[2,33]},{1:[2,34],7:[2,34],10:[2,34],16:[1,28],18:[2,34],21:[2,34],23:[2,34],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[2,34],40:[2,34],41:[2,34],42:[2,34],48:[2,34],50:[2,34],52:[2,34],54:[2,34]},{21:[1,91]},{21:[2,49],42:[1,92]},{21:[2,50],42:[1,93]},{8:[1,94],16:[2,8],19:[1,43],21:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],39:[2,8],40:[2,8],41:[2,8],42:[2,8]},{16:[1,28],21:[2,53],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],42:[2,53]},{1:[2,12],7:[2,12],10:[2,12],16:[2,12],18:[2,12],21:[2,12],23:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],48:[2,12],50:[2,12],52:[2,12],54:[2,12]},{7:[1,14],9:95,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{1:[2,15],7:[2,15],10:[2,15],16:[2,15],18:[2,15],21:[2,15],23:[2,15],27:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],39:[2,15],40:[2,15],41:[2,15],42:[2,15],48:[2,15],50:[2,15],52:[2,15],54:[2,15]},{1:[2,16],7:[2,16],10:[2,16],16:[2,16],18:[2,16],21:[2,16],23:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],48:[2,16],50:[2,16],52:[2,16],54:[2,16]},{18:[1,96],42:[1,97]},{18:[2,43],42:[2,43]},{23:[1,98],42:[1,99]},{45:[1,100]},{7:[2,61],13:[2,61],14:[2,61],15:[2,61],16:[2,61],19:[2,61],22:[2,61],23:[2,61],24:[2,61],25:[2,61],36:[2,61],38:[2,61]},{6:101,11:6,12:7,48:[1,8],50:[1,9]},{1:[2,57],7:[2,57],10:[2,57],16:[1,28],23:[2,57],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],48:[2,57],50:[2,57],51:102,52:[1,103]},{1:[2,14],7:[2,14],10:[2,14],16:[2,14],18:[2,14],21:[2,14],23:[2,14],27:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],48:[2,14],50:[2,14],52:[2,14],54:[2,14]},{1:[2,13],7:[2,13],10:[2,13],16:[2,13],18:[2,13],21:[2,13],23:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],48:[2,13],50:[2,13],52:[2,13],54:[2,13]},{7:[1,104]},{7:[1,14],9:105,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,14],9:106,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{16:[1,28],18:[2,37],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],42:[2,37]},{1:[2,40],7:[2,40],10:[2,40],16:[2,40],18:[2,40],21:[2,40],23:[2,40],27:[2,40],28:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],45:[2,40],48:[2,40],50:[2,40],52:[2,40],54:[2,40]},{7:[1,49],16:[1,51],22:[1,52],24:[1,50],26:107},{1:[2,41],7:[2,41],10:[2,41],16:[2,41],18:[2,41],21:[2,41],23:[2,41],27:[2,41],28:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],45:[2,41],48:[2,41],50:[2,41],52:[2,41],54:[2,41]},{7:[1,49],16:[1,51],22:[1,52],24:[1,50],26:108},{7:[1,49],16:[1,51],22:[1,52],24:[1,50],26:109},{10:[2,62]},{1:[2,56],7:[2,56],10:[2,56],23:[2,56],48:[2,56],50:[2,56]},{7:[1,14],9:111,12:110,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24],50:[1,9]},{8:[1,112]},{16:[1,28],21:[2,54],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],42:[2,54]},{16:[1,28],21:[2,51],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],42:[2,51]},{18:[2,44],42:[2,44]},{45:[1,113]},{23:[2,46],42:[2,46]},{1:[2,58],7:[2,58],10:[2,58],23:[2,58],48:[2,58],50:[2,58]},{1:[2,59],7:[2,59],10:[2,59],16:[1,28],23:[2,59],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],48:[2,59],50:[2,59]},{7:[1,14],9:114,13:[1,15],14:[1,16],15:[1,17],16:[1,18],19:[1,20],22:[1,19],24:[1,21],25:[1,22],36:[1,23],38:[1,24]},{7:[1,49],16:[1,51],22:[1,52],24:[1,50],26:115},{16:[1,28],21:[2,52],27:[1,29],28:[1,30],29:[1,31],30:[1,32],31:[1,33],32:[1,34],33:[1,35],34:[1,36],35:[1,37],36:[1,38],37:[1,39],39:[1,40],40:[1,41],41:[1,42],42:[2,52]},{23:[2,47],42:[2,47]}],
defaultActions: {101:[2,62]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip whitespace */
break;
case 2:return 13
break;
case 3:return 14
break;
case 4:return 15
break;
case 5:return 25
break;
case 6:return 48;
break;
case 7:return 50;
break;
case 8:return 52;
break;
case 9:return 7
break;
case 10: yy_.yytext = Number(yy_.yytext); return 24; 
break;
case 11: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 24; 
break;
case 12: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 24; 
break;
case 13:return 39
break;
case 14:return 41
break;
case 15:return 40
break;
case 16:return 31
break;
case 17:return 34
break;
case 18:return 33
break;
case 19:return 32
break;
case 20:return 54
break;
case 21:return 10
break;
case 22:return yy_.yytext
break;
}
},
rules: [/^(?:#(.)*\n)/,/^(?:\s+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:@)/,/^(?:switch\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)/,/^(?:"(\\.|[^\\"])*")/,/^(?:'[^\']*')/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\?\?)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:=>)/,/^(?:;)/,/^(?:=|:|\[|\]|\(|\)|,|\{|\}|\+|%|\*|-|\/|%|>|<|!)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = planout;
exports.Parser = planout.Parser;
exports.parse = function () { return planout.parse.apply(planout, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}