/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var planout = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"start":3,"rules_list":4,"rule":5,"expression":6,"END_STATEMENT":7,"IDENTIFIER":8,"=":9,"simple_expression":10,"ARROW_ASSIGN":11,"switch_expression":12,"if_expression":13,"TRUE":14,"FALSE":15,"NULL":16,"[":17,"array":18,"]":19,"(":20,"arguments":21,")":22,"{":23,"}":24,"CONST":25,"JSON_START":26,"json":27,"%":28,"/":29,">":30,"<":31,"EQUALS":32,"NEQ":33,"LTE":34,"GTE":35,"+":36,"-":37,"*":38,"!":39,"OR":40,"COALESCE":41,"AND":42,",":43,"json_array":44,"json_map":45,":":46,"arguments_list":47,"values_list":48,"SWITCH":49,"cases_list":50,"IF":51,"optional_else_expression":52,"ELSE":53,"case":54,"THEN":55,"$accept":0,"$end":1},
terminals_: {2:"error",7:"END_STATEMENT",8:"IDENTIFIER",9:"=",11:"ARROW_ASSIGN",14:"TRUE",15:"FALSE",16:"NULL",17:"[",19:"]",20:"(",22:")",23:"{",24:"}",25:"CONST",26:"JSON_START",28:"%",29:"/",30:">",31:"<",32:"EQUALS",33:"NEQ",34:"LTE",35:"GTE",36:"+",37:"-",38:"*",39:"!",40:"OR",41:"COALESCE",42:"AND",43:",",46:":",49:"SWITCH",51:"IF",53:"ELSE",55:"THEN"},
productions_: [0,[3,1],[4,0],[4,2],[5,1],[5,2],[5,4],[5,4],[6,1],[6,1],[10,1],[10,1],[10,1],[10,1],[10,3],[10,4],[10,4],[10,3],[10,3],[10,1],[10,2],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,2],[10,3],[10,3],[10,3],[18,0],[18,1],[18,3],[27,1],[27,1],[27,3],[27,3],[44,0],[44,1],[44,3],[45,0],[45,3],[45,5],[21,0],[21,1],[21,1],[47,3],[47,5],[48,1],[48,3],[12,4],[13,6],[52,0],[52,2],[52,2],[50,0],[50,3],[54,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = {"op": "seq", "seq": $$[$0]}; console.log(JSON.stringify(this.$)); return this.$; 
break;
case 2: this.$ = []; 
break;
case 3: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0-1]; 
break;
case 6: this.$ = {"op": "set", "var": $$[$0-3], "value": $$[$0-1]}; 
break;
case 7: this.$ = {"op": "set", "var": $$[$0-3], "value": $$[$0-1]}; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = {"op": "get", "var": $$[$0]}; 
break;
case 11: this.$ = true; 
break;
case 12: this.$ = false; 
break;
case 13: this.$ = null; 
break;
case 14: this.$ = {"op": "array", "values": $$[$0-1]}; 
break;
case 15: this.$ = $$[$0-1]; this.$["op"] = $$[$0-3]; 
break;
case 16: this.$ = {"op": "index", "base": $$[$0-3], "index": $$[$0-1]}; 
break;
case 17: this.$ = {"op": "seq", "seq": $$[$0-1]}; 
break;
case 18: this.$ = $$[$0-1]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = {"op": "literal", "value": $$[$0]}; 
break;
case 21: this.$ = {"op": "%", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 22: this.$ = {"op": "/", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 23: this.$ = {"op": ">", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 24: this.$ = {"op": "<", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 25: this.$ = {"op": "equals", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 26: this.$ = {"op": "not", "value": {"op": "equals", "left": $$[$0-2], "right": $$[$0]}}; 
break;
case 27: this.$ = {"op": "<=", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 28: this.$ = {"op": ">=", "left": $$[$0-2], "right": $$[$0]}; 
break;
case 29: this.$ = {"op": "sum", "values": [$$[$0-2], $$[$0]]}; 
break;
case 30: this.$ = {"op": "sum", "values": [$$[$0-2], {"op": "negative", "value": $$[$0]}]}; 
break;
case 31: this.$ = {"op": "product", "values": [$$[$0-2], $$[$0]]}; 
break;
case 32: this.$ = {"op": "negative", "value": $$[$0]}; 
break;
case 33: this.$ = {"op": "not", "value": $$[$0]}; 
break;
case 34: this.$ = {"op": "or", "values": [$$[$0-2], $$[$0]]}; 
break;
case 35: this.$ = {"op": "coalesce", "values": [$$[$0-2], $$[$0]]}; 
break;
case 36: this.$ = {"op": "and", "values": [$$[$0-2], $$[$0]]}; 
break;
case 37: this.$ = []; 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 40: this.$ = JSON.parse($$[$0]); 
break;
case 41: this.$ = $$[$0]; 
break;
case 42: this.$ = $$[$0-1]; 
break;
case 43: this.$ = $$[$0-1]; 
break;
case 44: this.$ = []; 
break;
case 45: this.$ = []; this.$.push($$[$0]); 
break;
case 46: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 47: this.$ = {}; 
break;
case 48: this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 49: this.$ = $$[$0-4]; this.$[$$[$0-2]] = $$[$0]; 
break;
case 50: this.$ = {}; 
break;
case 51: this.$ = $$[$0]; 
break;
case 52: if ($$[$0]["values"].length > 1) {
        this.$ = $$[$0];
      } else {
        this.$ = {"value": $$[$0]["values"][0]};
      }
    
break;
case 53: this.$ = {}; this.$[$$[$0-2]] = $$[$0]; 
break;
case 54: this.$ = $$[$0-4]; this.$[$$[$0-2]] = $$[$0]; 
break;
case 55: this.$ = {}; this.$["values"] = [$$[$0]]; 
break;
case 56: this.$ = $$[$0-2]; this.$["values"].push($$[$0]); 
break;
case 57: this.$ = {"op": "switch", "cases": $$[$0-1]}; 
break;
case 58: this.$ = {"op": "cond", "cond": [{"if": $$[$0-3], "then": $$[$0-1]}]};
      if ($$[$0]["cond"]) {
        this.$["cond"] = this.$["cond"].concat($$[$0]["cond"]);
      }
    
break;
case 59: this.$ = {}; 
break;
case 60: this.$ = $$[$0]; 
break;
case 61: this.$ = {"op": "cond", "cond": [{"if": true, "then": $$[$0]}]}; 
break;
case 62: this.$ = []; 
break;
case 63: this.$ = $$[$0-2]; this.$.push($$[$0-1]); 
break;
case 64: this.$ = {"op": "case", "condidion": $$[$0-2], "result": $$[$0]}; 
break;
}
},
table: [{1:[2,2],3:1,4:2,8:[2,2],49:[2,2],51:[2,2]},{1:[3]},{1:[2,1],5:3,6:4,8:[1,5],12:6,13:7,49:[1,8],51:[1,9]},{1:[2,3],8:[2,3],24:[2,3],49:[2,3],51:[2,3]},{1:[2,4],7:[1,10],8:[2,4],24:[2,4],49:[2,4],51:[2,4]},{9:[1,11],11:[1,12]},{1:[2,8],7:[2,8],8:[2,8],24:[2,8],49:[2,8],51:[2,8]},{1:[2,9],7:[2,9],8:[2,9],24:[2,9],49:[2,9],51:[2,9]},{23:[1,13]},{20:[1,14]},{1:[2,5],8:[2,5],24:[2,5],49:[2,5],51:[2,5]},{8:[1,16],10:15,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:27,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[2,62],14:[2,62],15:[2,62],16:[2,62],17:[2,62],20:[2,62],23:[2,62],24:[2,62],25:[2,62],26:[2,62],37:[2,62],39:[2,62],50:28},{8:[1,16],10:29,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{7:[1,30],17:[1,31],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45]},{1:[2,10],7:[2,10],8:[2,10],17:[2,10],19:[2,10],20:[1,46],22:[2,10],24:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],49:[2,10],51:[2,10],53:[2,10],55:[2,10]},{1:[2,11],7:[2,11],8:[2,11],17:[2,11],19:[2,11],22:[2,11],24:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],49:[2,11],51:[2,11],53:[2,11],55:[2,11]},{1:[2,12],7:[2,12],8:[2,12],17:[2,12],19:[2,12],22:[2,12],24:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],49:[2,12],51:[2,12],53:[2,12],55:[2,12]},{1:[2,13],7:[2,13],8:[2,13],17:[2,13],19:[2,13],22:[2,13],24:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],49:[2,13],51:[2,13],53:[2,13],55:[2,13]},{8:[1,16],10:48,14:[1,17],15:[1,18],16:[1,19],17:[1,20],18:47,19:[2,37],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26],43:[2,37]},{4:49,8:[2,2],24:[2,2],49:[2,2],51:[2,2]},{8:[1,16],10:50,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{1:[2,19],7:[2,19],8:[2,19],17:[2,19],19:[2,19],22:[2,19],24:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],49:[2,19],51:[2,19],53:[2,19],55:[2,19]},{8:[1,52],17:[1,54],23:[1,55],25:[1,53],27:51},{8:[1,16],10:56,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:57,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{7:[1,58],17:[1,31],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45]},{8:[1,16],10:61,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],24:[1,59],25:[1,23],26:[1,24],37:[1,25],39:[1,26],54:60},{17:[1,31],22:[1,62],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45]},{1:[2,6],8:[2,6],24:[2,6],49:[2,6],51:[2,6]},{8:[1,16],10:63,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:64,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:65,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:66,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:67,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:68,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:69,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:70,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:71,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:72,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:73,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:74,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:75,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:76,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:77,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,81],10:82,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],21:78,22:[2,50],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26],47:79,48:80},{19:[1,83],43:[1,84]},{17:[1,31],19:[2,38],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[2,38]},{5:3,6:4,8:[1,5],12:6,13:7,24:[1,85],49:[1,8],51:[1,9]},{17:[1,31],22:[1,86],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45]},{1:[2,20],7:[2,20],8:[2,20],17:[2,20],19:[2,20],22:[2,20],24:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],49:[2,20],51:[2,20],53:[2,20],55:[2,20]},{1:[2,40],7:[2,40],8:[2,40],17:[2,40],19:[2,40],22:[2,40],24:[2,40],28:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],46:[2,40],49:[2,40],51:[2,40],53:[2,40],55:[2,40]},{1:[2,41],7:[2,41],8:[2,41],17:[2,41],19:[2,41],22:[2,41],24:[2,41],28:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],37:[2,41],38:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],46:[2,41],49:[2,41],51:[2,41],53:[2,41],55:[2,41]},{8:[1,52],17:[1,54],19:[2,44],23:[1,55],25:[1,53],27:88,43:[2,44],44:87},{8:[1,52],17:[1,54],23:[1,55],24:[2,47],25:[1,53],27:90,43:[2,47],45:89},{1:[2,32],7:[2,32],8:[2,32],17:[1,31],19:[2,32],22:[2,32],24:[2,32],28:[1,32],29:[1,33],30:[2,32],31:[2,32],32:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[1,42],40:[2,32],41:[2,32],42:[2,32],43:[2,32],49:[2,32],51:[2,32],53:[2,32],55:[2,32]},{1:[2,33],7:[2,33],8:[2,33],17:[1,31],19:[2,33],22:[2,33],24:[2,33],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[2,33],49:[2,33],51:[2,33],53:[2,33],55:[2,33]},{1:[2,7],8:[2,7],24:[2,7],49:[2,7],51:[2,7]},{1:[2,57],7:[2,57],8:[2,57],24:[2,57],49:[2,57],51:[2,57]},{7:[1,91]},{17:[1,31],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],55:[1,92]},{8:[1,16],10:93,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{17:[1,31],19:[1,94],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45]},{1:[2,21],7:[2,21],8:[2,21],17:[1,31],19:[2,21],22:[2,21],24:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],49:[2,21],51:[2,21],53:[2,21],55:[2,21]},{1:[2,22],7:[2,22],8:[2,22],17:[1,31],19:[2,22],22:[2,22],24:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],49:[2,22],51:[2,22],53:[2,22],55:[2,22]},{1:[2,23],7:[2,23],8:[2,23],17:[1,31],19:[2,23],22:[2,23],24:[2,23],28:[1,32],29:[1,33],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[2,23],36:[1,40],37:[1,41],38:[1,42],40:[2,23],41:[2,23],42:[2,23],43:[2,23],49:[2,23],51:[2,23],53:[2,23],55:[2,23]},{1:[2,24],7:[2,24],8:[2,24],17:[1,31],19:[2,24],22:[2,24],24:[2,24],28:[1,32],29:[1,33],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],36:[1,40],37:[1,41],38:[1,42],40:[2,24],41:[2,24],42:[2,24],43:[2,24],49:[2,24],51:[2,24],53:[2,24],55:[2,24]},{1:[2,25],7:[2,25],8:[2,25],17:[1,31],19:[2,25],22:[2,25],24:[2,25],28:[1,32],29:[1,33],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[1,40],37:[1,41],38:[1,42],40:[2,25],41:[2,25],42:[2,25],43:[2,25],49:[2,25],51:[2,25],53:[2,25],55:[2,25]},{1:[2,26],7:[2,26],8:[2,26],17:[1,31],19:[2,26],22:[2,26],24:[2,26],28:[1,32],29:[1,33],30:[2,26],31:[2,26],32:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[1,40],37:[1,41],38:[1,42],40:[2,26],41:[2,26],42:[2,26],43:[2,26],49:[2,26],51:[2,26],53:[2,26],55:[2,26]},{1:[2,27],7:[2,27],8:[2,27],17:[1,31],19:[2,27],22:[2,27],24:[2,27],28:[1,32],29:[1,33],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[1,40],37:[1,41],38:[1,42],40:[2,27],41:[2,27],42:[2,27],43:[2,27],49:[2,27],51:[2,27],53:[2,27],55:[2,27]},{1:[2,28],7:[2,28],8:[2,28],17:[1,31],19:[2,28],22:[2,28],24:[2,28],28:[1,32],29:[1,33],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[1,40],37:[1,41],38:[1,42],40:[2,28],41:[2,28],42:[2,28],43:[2,28],49:[2,28],51:[2,28],53:[2,28],55:[2,28]},{1:[2,29],7:[2,29],8:[2,29],17:[1,31],19:[2,29],22:[2,29],24:[2,29],28:[1,32],29:[1,33],30:[2,29],31:[2,29],32:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29],38:[1,42],40:[2,29],41:[2,29],42:[2,29],43:[2,29],49:[2,29],51:[2,29],53:[2,29],55:[2,29]},{1:[2,30],7:[2,30],8:[2,30],17:[1,31],19:[2,30],22:[2,30],24:[2,30],28:[1,32],29:[1,33],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30],38:[1,42],40:[2,30],41:[2,30],42:[2,30],43:[2,30],49:[2,30],51:[2,30],53:[2,30],55:[2,30]},{1:[2,31],7:[2,31],8:[2,31],17:[1,31],19:[2,31],22:[2,31],24:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31],38:[2,31],40:[2,31],41:[2,31],42:[2,31],43:[2,31],49:[2,31],51:[2,31],53:[2,31],55:[2,31]},{1:[2,34],7:[2,34],8:[2,34],17:[1,31],19:[2,34],22:[2,34],24:[2,34],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[2,34],41:[2,34],42:[2,34],43:[2,34],49:[2,34],51:[2,34],53:[2,34],55:[2,34]},{1:[2,35],7:[2,35],8:[2,35],17:[1,31],19:[2,35],22:[2,35],24:[2,35],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[2,35],41:[2,35],42:[2,35],43:[2,35],49:[2,35],51:[2,35],53:[2,35],55:[2,35]},{1:[2,36],7:[2,36],8:[2,36],17:[1,31],19:[2,36],22:[2,36],24:[2,36],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[2,36],41:[2,36],42:[2,36],43:[2,36],49:[2,36],51:[2,36],53:[2,36],55:[2,36]},{22:[1,95]},{22:[2,51],43:[1,96]},{22:[2,52],43:[1,97]},{9:[1,98],17:[2,10],20:[1,46],22:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10]},{17:[1,31],22:[2,55],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[2,55]},{1:[2,14],7:[2,14],8:[2,14],17:[2,14],19:[2,14],22:[2,14],24:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],49:[2,14],51:[2,14],53:[2,14],55:[2,14]},{8:[1,16],10:99,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{1:[2,17],7:[2,17],8:[2,17],17:[2,17],19:[2,17],22:[2,17],24:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],49:[2,17],51:[2,17],53:[2,17],55:[2,17]},{1:[2,18],7:[2,18],8:[2,18],17:[2,18],19:[2,18],22:[2,18],24:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],34:[2,18],35:[2,18],36:[2,18],37:[2,18],38:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],49:[2,18],51:[2,18],53:[2,18],55:[2,18]},{19:[1,100],43:[1,101]},{19:[2,45],43:[2,45]},{24:[1,102],43:[1,103]},{46:[1,104]},{8:[2,63],14:[2,63],15:[2,63],16:[2,63],17:[2,63],20:[2,63],23:[2,63],24:[2,63],25:[2,63],26:[2,63],37:[2,63],39:[2,63]},{6:105,12:6,13:7,49:[1,8],51:[1,9]},{1:[2,59],7:[2,59],8:[2,59],17:[1,31],24:[2,59],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],49:[2,59],51:[2,59],52:106,53:[1,107]},{1:[2,16],7:[2,16],8:[2,16],17:[2,16],19:[2,16],22:[2,16],24:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],49:[2,16],51:[2,16],53:[2,16],55:[2,16]},{1:[2,15],7:[2,15],8:[2,15],17:[2,15],19:[2,15],22:[2,15],24:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],34:[2,15],35:[2,15],36:[2,15],37:[2,15],38:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],49:[2,15],51:[2,15],53:[2,15],55:[2,15]},{8:[1,108]},{8:[1,16],10:109,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,16],10:110,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{17:[1,31],19:[2,39],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[2,39]},{1:[2,42],7:[2,42],8:[2,42],17:[2,42],19:[2,42],22:[2,42],24:[2,42],28:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],46:[2,42],49:[2,42],51:[2,42],53:[2,42],55:[2,42]},{8:[1,52],17:[1,54],23:[1,55],25:[1,53],27:111},{1:[2,43],7:[2,43],8:[2,43],17:[2,43],19:[2,43],22:[2,43],24:[2,43],28:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],46:[2,43],49:[2,43],51:[2,43],53:[2,43],55:[2,43]},{8:[1,52],17:[1,54],23:[1,55],25:[1,53],27:112},{8:[1,52],17:[1,54],23:[1,55],25:[1,53],27:113},{7:[2,64]},{1:[2,58],7:[2,58],8:[2,58],24:[2,58],49:[2,58],51:[2,58]},{8:[1,16],10:115,13:114,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26],51:[1,9]},{9:[1,116]},{17:[1,31],22:[2,56],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[2,56]},{17:[1,31],22:[2,53],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[2,53]},{19:[2,46],43:[2,46]},{46:[1,117]},{24:[2,48],43:[2,48]},{1:[2,60],7:[2,60],8:[2,60],24:[2,60],49:[2,60],51:[2,60]},{1:[2,61],7:[2,61],8:[2,61],17:[1,31],24:[2,61],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],49:[2,61],51:[2,61]},{8:[1,16],10:118,14:[1,17],15:[1,18],16:[1,19],17:[1,20],20:[1,22],23:[1,21],25:[1,23],26:[1,24],37:[1,25],39:[1,26]},{8:[1,52],17:[1,54],23:[1,55],25:[1,53],27:119},{17:[1,31],22:[2,54],28:[1,32],29:[1,33],30:[1,34],31:[1,35],32:[1,36],33:[1,37],34:[1,38],35:[1,39],36:[1,40],37:[1,41],38:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[2,54]},{24:[2,49],43:[2,49]}],
defaultActions: {105:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip whitespace */
break;
case 2:return 14
break;
case 3:return 15
break;
case 4:return 16
break;
case 5:return 26
break;
case 6:return 49;
break;
case 7:return 51;
break;
case 8:return 53;
break;
case 9:return 8
break;
case 10: yy_.yytext = Number(yy_.yytext); return 25; 
break;
case 11: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 25; 
break;
case 12: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 25; 
break;
case 13:return 11
break;
case 14:return 40
break;
case 15:return 42
break;
case 16:return 41
break;
case 17:return 32
break;
case 18:return 35
break;
case 19:return 34
break;
case 20:return 33
break;
case 21:return 55
break;
case 22:return 7
break;
case 23:return yy_.yytext
break;
}
},
rules: [/^(?:#(.)*\n)/,/^(?:\s+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:@)/,/^(?:switch\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)/,/^(?:"(\\.|[^\\"])*")/,/^(?:'[^\']*')/,/^(?:<-)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\?\?)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:=>)/,/^(?:;)/,/^(?:=|:|\[|\]|\(|\)|,|\{|\}|\+|%|\*|-|\/|%|>|<|!)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = planout;
exports.Parser = planout.Parser;
exports.parse = function () { return planout.parse.apply(planout, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}